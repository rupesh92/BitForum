c
url
n
c
url
n
c
n
response[0]["outputs"][0]["address"]
response[0]["outputs"]
response[0]["inputs"]
response[0].inputs
response[0]
response["inputs"]
response["inputs"
response
n
c
HTTParty.get(url,options).parsed_response["data"].count
HTTParty.get(url,options).parsed_response["data"]
HTTParty.get(url,options).parsed_response[:data]
HTTParty.get(url,options).parsed_response.data
HTTParty.get(url,options).parsed_response
HTTParty.get(url,options).parsed_response[0]
HTTParty.get(url,options).parsed_response[0].inputs
HTTParty.get(url,options).parsed_response.count
JSON.parse(HTTParty.get(url,options).parsed_response)
HTTParty.get(url,options).parsed_response
 JSON.parse(HTTParty.get(url,options))
c
n
HTTParty.get(url,options)
c
Tag.count
n
Tag.count
c
n
c
Tag.count
c
Tag.last
n
tag
c
@tags
c
@question
@questions
c
session[:user_id]
session[:id]
params
c
safeurl
URI.parse(URI.encode("https://github.com", "[]"))
c
HTTParty.get('http://twitter.com/statuses/public_timeline.json', {})
c
params
c
n
user
n
c
question.first
question.id
TagQuestion
TagQuestion.where(:question_id => question.id)
question
c
n
@questions.count
@questions
n
tagQuestions.first
tagQuestions.count
tagQuestions
c
@questions.first
c
n
@questions.count
@questions
@question
c
@questions
@tags
c
tag_id
n
Tag.where(:body =>tag.downcase)
tag.downcase
n
c
exit
a = TagQuestion.where(:question_id => question.id)
question = Question.last
tagQuestions
@tags
n
@questions
@question
n
c
n
user
n
c
session[:user_id]
user
user.questions.create(:body => params[:question])
n
params
c
params
c
Answer.last
Answer.first
Answer.count
c
params
c
params
c
params
c
params
c
params
arams
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
User.find(session[:user_id])
c
@questions
n
params
c
params
c
params
c
params
tag
n
c
params
exit
c
@tags[0]
tags[0]
@tags.length
@tags
c
session[:user_id]
c
n
c
Question.last
Tag.last
Tag.count
c
n
user
n
c
User.first
User.head
User.find_by(id: session[:user_id])
session[:user_id]
user
n
c
q
user
n
c
Question.count
c
params
Tag.count
c
Tag.last
Tag.first
Tag.count
c
a[0]
a = JSON.parse(params[:tags])
a = params[:tags]
params
question
c
params["tags"].toJSONArray
params["tags"][0]
params["tags"]
params[tags]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
session
n
session[:user_id]
session
sessions
sessions[:user_id]
c
params
c
matched_user
c
matched_user
s
c
exit
c
params
c
q
exit
ecit
c
params[:user][:email]
params[:user]
